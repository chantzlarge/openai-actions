name: 'On Pull Request Opened'
description: 'Triggers on opening a pull request and performs specific actions.'

inputs:
  github_token:
    description: 'GitHub token for authentication.'
    required: true
  openai_api_key:
    description: 'OpenAI API key for accessing OpenAI services.'
    required: true
  pull_request_template:
    description: 'Path to an optional PR template file.'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Prepare PR Data and Generate AI Completion in Docker
      uses: docker://registry.gitlab.com/gitlab-ci-utils/curl-jq:latest
      with:
        entrypoint: /bin/sh
        args: >
          -c "
            # 1) Trim the pull request payload from the event file
            pull_request_event_trimmed=\$(jq '{ pull_request: { title: .pull_request.title, body: .pull_request.body, number: .pull_request.number } }' \"\$GITHUB_EVENT_PATH\" | head -c 3000)
            echo \"\$pull_request_event_trimmed\" > pr_event_trimmed.json

            # 2) Trim the PR template file (if provided)
            pull_request_template_trimmed=\$(head -c 3000 \"\$PULL_REQUEST_TEMPLATE\")
            echo \"\$pull_request_template_trimmed\" > pr_template_trimmed.txt

            # 3) Extract the PR number
            pr_number=\$(echo \"\$pull_request_event_trimmed\" | jq -r '.pull_request.number')
            echo \"\$pr_number\" > pr_number.txt

            # 4) Create a system and user prompt for GPT
            system_message=\"You are a helpful AI. Create an improved pull request description.\"
            user_prompt=\"Event:\n\$(cat pr_event_trimmed.json)\n\nTemplate:\n\$(cat pr_template_trimmed.txt)\n\nPlease create an improved PR description.\"

            # 5) Build the request data JSON
            request_data=\$(jq -n \
              --arg system \"\$system_message\" \
              --arg user \"\$user_prompt\" \
              '{
                \"model\": \"gpt-4\",
                \"messages\": [
                  {
                    \"role\": \"system\",
                    \"content\": \$system
                  },
                  {
                    \"role\": \"user\",
                    \"content\": \$user
                  }
                ]
              }'
            )

            # 6) Call the OpenAI Chat Completions API using $OPENAI_API_KEY
            response=\$(curl -s -X POST \"https://api.openai.com/v1/chat/completions\" \
              -H \"Content-Type: application/json\" \
              -H \"Authorization: Bearer \$OPENAI_API_KEY\" \
              -d \"\$request_data\")

            refined_description=\$(echo \"\$response\" | jq -r '.choices[0].message.content')
            echo \"\$refined_description\" > pull_request_description.txt
          "
      # Pass secrets as env vars so GitHub won't partially censor them in your command
      env:
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        PULL_REQUEST_TEMPLATE: ${{ inputs.pull_request_template }}

    - name: Update PR Using GitHub Script
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs');
          const prNumber = parseInt(fs.readFileSync('pr_number.txt', 'utf8').trim(), 10);
          const refined = fs.readFileSync('pull_request_description.txt', 'utf8');

          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber,
            body: refined
          });
